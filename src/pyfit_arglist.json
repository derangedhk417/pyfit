{
	"config_file" : {
		"short_name"       : "-j",
		"long_name"        : "--config-file",
		"type"             : "string",
		"predicate"        : null,
		"description"      : "The configuration file to use. Default is _pyfit_config.json.",
		"examples"         : []
	},
	"generate_training_set" : {
		"short_name"       : "-g",
		"long_name"        : "--generate-training-set",
		"type"             : "flag",
		"predicate"        : null,
		"description"      : "When specified, the program will generate a training set file.",
		"examples"         : []
	},
	"training_set_output_file" : {
		"short_name"       : "-a",
		"long_name"        : "--training-set-out",
		"type"             : "string",
		"predicate"        : "generate_training_set",
		"description"      : "The file to write the training set to.",
		"examples"         : []
	},
	"dft_input_file" : {
		"short_name"       : "-f",
		"long_name"        : "--dft-file",
		"type"             : "string",
		"predicate"        : "generate_training_set",
		"description"      : "The file that contains the dft data.",
		"examples"         : []
	},
	"training_set_in" : {
		"short_name"       : "-s",
		"long_name"        : "--training-set-in",
		"type"             : "string",
		"predicate"        : "run_training",
		"description"      : "The training file to use.",
		"examples"         : []
	},
	"run_training" : {
		"short_name"       : "-t",
		"long_name"        : "--run-training",
		"type"             : "flag",
		"predicate"        : null,
		"description"      : "Train the neural network.",
		"examples"         : []
	},
	"neural_network_in" : {
		"short_name"       : "-e",
		"long_name"        : "--network-input-file",
		"type"             : "string",
		"predicate"        : null,
		"description"      : "The neural network file to load for training.",
		"examples"         : []
	},
	"neural_network_out" : {
		"short_name"       : "-y",
		"long_name"        : "--network-output-file",
		"type"             : "string",
		"predicate"        : "run_training",
		"description"      : "The neural network file to write when done training.",
		"examples"         : []
	},
	"training_iterations" : {
		"short_name"       : "-i",
		"long_name"        : "--training-iterations",
		"type"             : "int",
		"predicate"        : "run_training",
		"description"      : "How many training iterations to run.",
		"examples"         : []
	},
	"randomize" : {
		"short_name"       : "-r",
		"long_name"        : "--randomize-nn",
		"type"             : "flag",
		"predicate"        : "run_training",
		"description"      : "Randomize the neural network before training. Will not modify file.",
		"examples"         : []
	},
	"force_cpu" : {
		"short_name"       : "-c",
		"long_name"        : "--force-cpu",
		"type"             : "flag",
		"predicate"        : "run_training",
		"description"      : "Force training to take place on the cpu.",
		"examples"         : []
	},
	"gpu_affinity" : {
		"short_name"       : "-u",
		"long_name"        : "--gpu-affinity",
		"type"             : "int",
		"predicate"        : "run_training",
		"description"      : "Train the network on the specified gpu (index).",
		"examples"         : []
	},
	"thread_count" : {
		"short_name"       : "-n",
		"long_name"        : "--n-threads",
		"type"             : "int",
		"predicate"        : null,
		"description"      : "Force operations to use only this many threads.",
		"examples"         : []
	},
	"no_warn" : {
		"short_name"       : "-w",
		"long_name"        : "--no-warn",
		"type"             : "flag",
		"predicate"        : "run_training",
		"description"      : "Don't issue a warning and continue training if the a structural group will not be represented in the validation data set.",
		"examples"         : []
	},
	"overwrite" : {
		"short_name"       : "-o",
		"long_name"        : "--overwrite",
		"type"             : "flag",
		"predicate"        : null,
		"description"      : "Overwrite output files if they already exist. Use at your own risk.",
		"examples"         : []
	},
	"unique" : {
		"short_name"       : "-m",
		"long_name"        : "--unique",
		"type"             : "flag",
		"predicate"        : null,
		"description"      : "Ensure that all output file names are unique by naming them by the date and time. Format is <original_name>.<datetime>.<original_extension>"
	},
	"validation_split_seed" : {
		"short_name"       : "-v",
		"long_name"        : "--validation-split-seed",
		"type"             : "int",
		"predicate"        : "run_training",
		"description"      : "Seed the numpy rng with this number before deciding how to split the validation and training data. Useful for repeatability of results. Note: PyTorch does not guarentee determinism, so results may not be exact. Note: 0 is interpreted to mean that the system should use the default, probabilistic, seed."
	},
	"l2_regularization_prefactor" : {
		"short_name"       : "-l",
		"long_name"        : "--l2-regularization-coefficient",
		"type"             : "float",
		"predicate"        : "run_training",
		"description"      : "The factor to multiply the L2 weight normalization by before adding it to the loss. If this is 0.0, no L2 weight regularization is applied. L2 loss is not included in the loss log."
	},
	"log_path" : {
		"type"        : "string",
		"description" : "The path to the file to put logs into."
	},
	"e_shift" : {
		"type"        : "float",
		"description" : "Used to modify energy values placed in the training file while it is being generated. file value = e_DFT + n_atoms*e_shift"
	},
	"network_backup_dir" : {
		"type"        : "string",
		"description" : "The directory to place backups of the neural network in during training."
	},
	"network_backup_interval" : {
		"type"        : "int",
		"description" : "The interval to backup the neural network on. 0 = don\"t store backups."
	},
	"loss_log_path" : {
		"type"        : "string",
		"description" : "The file to store the training error of the neural network in. If left blank, error will not be stored."
	},
	"validation_log_path" : {
		"type"        : "string",
		"description" : "The file to store the validation error of the neural network in. If left blank, error will not be stored."
	},
	"validation_interval" : {
		"type"        : "int",
		"description" : "The interval to calculate the validation error on. 0 = don\"t calculate validation."
	},
	"energy_volume_file" : {
		"type"        : "string",
		"description" : "The file to store the energy vs. volume data for the network in."
	},
	"energy_volume_interval" : {
		"type"        : "int",
		"description" : "The interval to dump energy vs. volume into the file on."
	},
	"validation_ratio" : {
		"type"        : "float",
		"description" : "The ratio of validation inputs to total inputs."
	},
	"learning_rate" : {
		"type"        : "float",
		"description" : "The learning rate to use when training the neural network."
	},
	"max_lbfgs_iterations" : {
		"type"        : "int",
		"description" : "The maximum number of LBFGS optimization iterations per training iteration. A value of 10 is usually sufficient."
	},
	"error_restart_level" : {
		"type"        : "float",
		"description" : "If this error is exceeded at any point in the training, the neural network fitting parameters will be randomized and the whole training process will be restarted. Use 0.0 to indicate that restarts should never occur. The maximum number of restarts is 3. After that, the system will shutdown."
	},
	"nvidia_smi_log" : {
		"type"        : "str",
		"description" : "The file to log the output of the nvidia-smi command into. If this is blank, it will not be logged. If specified, the output will be logged every 50 iterations."
	}
}